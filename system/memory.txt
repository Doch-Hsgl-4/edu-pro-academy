# === ОСНОВНЫЕ ПРАВИЛА ПРОЕКТА EDU PRO ACADEMY ===

1. Все HTML- и PHP-файлы должны быть связаны через style.css (путь: /assets/css/style.css)
2. В проекте используется PDO для подключения к базе данных. Все подключения идут через includes/db.php
3. Пользователи могут входить в систему через login.php и регистрироваться через register.php
4. Все страницы хранятся в корневой папке проекта, кроме технических файлов и стилей
5. Структура проекта и связи между файлами фиксируются в листе “Структура проекта” Google Таблицы

ядро памяти
- Проект построен по принципу "Чистая архитектура + масштабируемость".
- Все страницы хранятся в корневой директории, за исключением ассетов и includes.
- Глобальные стили, изображения и скрипты находятся в assets/.
- В проекте используется внешний прокси-сервер для надёжной работы с GitHub.
- Код и структура проектируются под будущее расширение (курсы, дерево знаний, API).

- /assets/css/style.css — глобальные стили
- /assets/images/ — изображения (фон, логотип, иконки)
- /includes/db.php — подключение к БД через PDO
- /system/memory.txt — внутренняя архитектурная память
- /index.php — главная страница
- register.php, login.php, dashboard.php — стандартные точки входа пользователя

- Все уроки связаны логически: перед тем как открыть новую тему, нужно пройти предыдущую (обязательные связи).
- У одного урока может быть несколько обязательных "предков" — переход к новому возможен только при завершении всех.
- Если пользователь считает, что тему уже знает — он может пройти тест по всем предыдущим темам. Успешное прохождение тестов откроет доступ дальше.
- Курсы тоже имеют связи:
    - Обязательные (например: Питон зависит от основ IDE или от курса по информатике).
    - Необязательные (например: математика усиливает понимание информатики, но не блокирует доступ).
- Проверка обязательных курсов перед запуском нового — аналогично логике уроков. Если курс не пройден, пользователь должен пройти итоговый тест.
- Каждая тема, раздел и курс имеет уникальный ID и граф связей (ориентированный ациклический граф).
- Прогресс по урокам и курсам хранится в БД и влияет на открытие новых материалов.

- Карта курсов пока обсуждается:
    Вариант 1: Одно общее дерево со всеми курсами, разделами и темами (3D или интерактивное).
    Вариант 2: Дерево только курсов. При выборе курса — открывается поддерево с разделами и уроками.


- Гость (неофициальная роль, без входа в систему):
    - Может просматривать главную страницу (index.php)
    - Имеет доступ к карте курсов (map.php)
    - Может просматривать первую тему каждого курса, если у неё нет обязательных связей
    - Не имеет доступа к отслеживанию прогресса, чату, тестам и другим функциональным страницам

- Студент:
    - Получает доступ к курсам, разделам и урокам
    - Видит свой прогресс, может проходить тесты
    - Может открывать новые темы при соблюдении условий (пройден предыдущий урок или тест)
    - Доступ к чату поддержки (только просмотр/вопрос)

- Модератор (ранее “консультант”):
    - Может отвечать пользователям в чате поддержки
    - Может предлагать новые темы внутри существующих курсов (создание тем)
    - Может модерировать контент (если это разрешено админом)
    - Права определяются админом: чат, курсы, тесты
    - Наследует права студента

- Админ:
    - Может одобрять или отклонять темы, предложенные модераторами
    - Управляет деревом курсов (изменяет структуру, добавляет/удаляет темы)
    - Назначает, ограничивает и удаляет модераторов
    - Видит статистику по пользователям и курсам
    - Наследует все права модератора и студента

- Владелец (ранее “супер-админ”):
    - Имеет полный административный и технический доступ ко всей системе
    - Может управлять файлами, базой данных, внешней памятью и прокси
    - Доступ к системным настройкам, журналам, резервным копиям
    - Управляет всеми ролями, в том числе админами
    - Может закрыть или клонировать проект



- Используется PDO и параметризованные запросы
- Сессии активируются через session_start()
- Авторизация через login.php → устанавливаются безопасные куки
- Куки подписаны HMAC и действуют 7 дней
- Аватары пользователей загружаются через безопасную форму и хранятся в /uploads



- GitHub используется для хранения всего кода
- Внешняя память — Google Таблица с ссылками, логикой, путями
- Прокси-сервер на Cloudflare Workers позволяет получать код без искажений
- Все ссылки в таблице должны идти через прокси



1. Обсуждение:
    - Все новые функции, идеи и обновления обсуждаются с системой (ИИ) на основе внешней памяти (Google Таблицы, memory.txt и текущего кода).
    - На этом этапе формируется концепция, структура, связи с другими частями проекта и потенциальные зависимости.

2. Подготовка структуры:
    - После согласования идея оформляется в виде:
        - строк и листов в Google Таблице
        - структуры новых файлов, путей и связей
        - возможных прав доступа
    - Все связи и зависимости фиксируются в таблице и памяти (`memory.txt`)

3. Техническая реализация:
    - Создаётся нужная папка/файл на GitHub с именем и структурой, согласованными в таблице.
    - Применяются шаблоны/генераторы или пишется ручной код.
    - Используется внешний прокси для проверки содержимого.

4. Обновление памяти:
    - После реализации код анализируется ИИ повторно.
    - Обновляется файл `memory.txt`, вносятся связи, маршруты, роли доступа и логика.
    - При необходимости — обновляется “Структура проекта” в Google Таблице.

5. Ретестирование и запись в истории:
    - Новая функция или файл проверяются на соответствие:
        - стилю кода,
        - архитектурным правилам,
        - безопасности.
    - В таблице появляется отметка о дате, статусе и ссылке на финальный код.

⚠️ Никакой функционал не внедряется без записи в память и таблицы.




- Дизайн вдохновлён Duolingo, W3Schools, Яндекс.Учебник
- Цветовая палитра: белый фон, акцент — оранжевый (#ff8c00)
- Шрифт основной — Roboto
- Аватары круглые, кнопки адаптивные, анимации через AOS
- Страницы адаптированы под мобильные устройства


=== ТАБЛИЦЫ БАЗЫ ДАННЫХ ===

1. users — информация о пользователях
- ID, username, email, password, profile_photo, role, created_at, updated_at, is_active, email_verified

2. courses — курсы
- ID, title, slug, description, created_at, author_id, is_public

3. lessons — темы внутри курсов
- ID, course_id, title, slug, content_path, order_num, is_free, created_at

4. lesson_relations — связи между темами
- ID, lesson_from, lesson_to, type ('required', 'optional')

5. progress — отслеживание прохождения уроков пользователями
- ID, user_id, lesson_id, status ('not_started', 'in_progress', 'completed', 'passed_test'), last_opened, updated_at

6. course_relations — связи между курсами
- ID, course_from, course_to, type ('required', 'optional'), comment

=== ПОДКЛЮЧЕНИЕ К БАЗЕ ДАННЫХ ===

- Все подключения к MySQL идут через файл `includes/db.php`
- Используется PDO с настройками:
  - хост: `localhost`
  - база: `education_platform`
  - пользователь: `root`
  - пароль: пустой (локально)
  - кодировка: `utf8mb4`
- Установлен `PDO::ERRMODE_EXCEPTION` для обработки ошибок
- На продакшене параметры подключения должны быть вынесены из кода (например, через `.env`)



# === ТРИГГЕРЫ ПАМЯТИ (автоматические реакции ИИ) ===

- При добавлении нового файла в Google Таблицу:
  → Проверяю путь, тип, связанность с БД и другими файлами
  → Предлагаю внести в `memory.txt` описание и зависимости

- При обновлении файла на GitHub (по новой raw-ссылке или по изменению даты):
  → Перечитываю его заново, сравниваю с прошлой версией
  → Проверяю совместимость со связанными модулями

- При добавлении или изменении строки в `memory.txt`:
  → Автоматически проверяю все связанные файлы и обновляю внутренние связи

- При добавлении новой таблицы БД:
  → Проверяю необходимость изменений в php-скриптах, панели администратора и логике доступа

- При создании нового курса, раздела или темы:
  → Проверяю уникальность slug/ID, связи между темами, прогресс, роли доступа

⚠️ Все триггеры обрабатываются автоматически при каждом сеансе, если не указано иное.



# === КОНТРОЛЬ ВЕРСИЙ ВНЕШНЕЙ ПАМЯТИ (memory.txt) ===

- Все значимые изменения сопровождаются заголовком версии:
  Пример: ## Версия 1.3 — 2025-04-14 (добавлены роли, логика доступа, исправления в БД)

- Формат:
  ## Версия X.X — [дата]
  ⤷ краткое описание, что было обновлено (структура, роли, связи, файлы и т.д.)

- При каждом обновлении:
  → Я сверяю, не нарушены ли зависимости и логика других элементов системы
  → Сообщаю об этом в чате с пометкой 📝 «Обновление зафиксировано в памяти»

- Возможен откат: при наличии архива или явной команды, старые версии можно восстановить



# === СТАНДАРТНЫЙ ЧЕК-ЛИСТ ПРИ РАБОТЕ С НОВОЙ ФУНКЦИЕЙ ===

1. 📌 Обсуждение:
   - Цель, логика, доступ, связи, влияние на БД и другие модули

2. 📋 Таблица:
   - Создана строка в Google Таблице с путем, назначением и ссылкой на файл

3. 🧠 Память:
   - Обновлён файл `memory.txt` с описанием файла и его связи

4. 💾 GitHub:
   - Загружен/обновлён файл с валидным raw-путём (желательно через прокси)

5. 🔎 Анализ:
   - Проверка на конфликты, повторение кода, доступ к БД и общую архитектуру

6. ✅ Подтверждение:
   - Все состояния зафиксированы: "Готово", "WIP", "Проверено", "Ожидает внедрения"


## Версия 1.4 — 2025-04-14
⤷ Внедрены: триггеры внешней памяти, контроль версий, чек-листы. Установлен единый протокол взаимодействия с памятью.

=== ЛОГИКА РЕГИСТРАЦИИ ПОЛЬЗОВАТЕЛЯ ===

Файл: register.php
- Форма регистрации с полями:
  - username
  - email
  - password + confirm
  - загрузка аватара
- Поддерживает:
  - CSRF-защиту через сессию и скрытое поле формы
  - Проверку уникальности username и email через AJAX (check_unique.php)
  - Проверку и предпросмотр аватара (client-side и server-side):
      - Поддержка JPEG, PNG, GIF
      - Ограничение размера до 2MB
- При успешной регистрации:
  - Хэшируется пароль через `password_hash`
  - Аватар сохраняется в /uploads/
  - По умолчанию поле `email_verified` = 0
  - Устанавливается кука `auth` с ID + HMAC
  - Редирект на страницу `verify_email.php`

---

Файл: verify_email.php
- Отображает экран с инструкцией: «Проверьте почту»
- Есть кнопки:
  - Я подтвердил — ручная проверка
  - Повторная отправка письма
  - Вернуться к регистрации
- Каждые 10 секунд выполняется автоматическая проверка email через `check_verification.php`
- При успешной верификации — редирект на `dashboard.php`

---

Файл: check_verification.php
- Проверяет значение поля `email_verified` в таблице users
- Отдаёт JSON: `{ verified: true/false }`

---

Файл: resend_verification.php
- Повторно отправляет письмо с ссылкой подтверждения
- Генерирует токен-подтверждение (если реализовано)
- Отдаёт JSON-ответ с сообщением

---

Файл: verify_email_link.php (будет создан позже)
- Обрабатывает переход по ссылке из письма
- Сравнивает токен, обновляет `email_verified` в БД
- Удаляет токен из БД или делает его недействительным
- Может авторизовать пользователя и перенаправить в `dashboard.php` или обратно на `verify_email.php`

---

Роли доступа:
- Страница `register.php` доступна всем (гость)
- Страница `verify_email.php` доступна только авторизованным (по куке `auth`)
- После подтверждения email пользователь перенаправляется на `dashboard.php`

Дополнительно:
- Все стили формы регистрации перенесены в `assets/css/register.css`
- Глобальные стили подключаются через `style.css`
- Все зависимости и маршруты зафиксированы в таблице


